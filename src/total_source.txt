// 강의 실습 자료
#React Redux  실습
1. Action Type, Action저장될 데이터 초기화
2. Action을 반환하는  Action생성 함수

#src/actions/index.js
export const INCREMENT = 'INCREMENT';
export const DECREMENT = 'DECREMENT';
export const SET_DIFF = 'SET_DIFF';
// 카운터의 값을 올린다.

export function increment() {  //Action 생성함수
    return {
        type: INCREMENT
    };
}
// 카운터의 값을 내린다
export function decrement() {  //Action 생성함수
    return {
        type: DECREMENT
    };
}

// 버튼이 눌릴 때 더하거나 뺄 값을 설정한다.
export function setDiff(value) {  //Action 생성함수
    return {
        type: SET_DIFF,
        diff: value  
    };
}


2. reducer 함수  - store의 state를 변경 (순수 함수)
#reducer 작성하기 - src/reducers/index.js
import { INCREMENT, DECREMENT, SET_DIFF } from '../actions';
import { combineReducers } from 'redux';

const counterInitialState = {
    value: 0,
    diff: 1
};  

 
const counter = (state = counterInitialState, action) => {
    switch(action.type) {
        case INCREMENT:
            return Object.assign({}, state, {
                value: state.value + state.diff
            });
        case DECREMENT:
            return Object.assign({}, state, {
                value: state.value - state.diff
            });
        case SET_DIFF:
            return Object.assign({}, state, {
                diff: action.diff
            });
        default:
            return state;
    }
};

const extra = (state = { value: 'this_is_extra_reducer' }, action) => {
    switch(action.type) {
        default:
            return state;
    }
}
//combineReducer를 사용해서 reducer함수를 Reducer 객체에 결합

const counterApp = combineReducers({
    counter,
    extra
});

//Reducer객체 내보내기
export default counterApp;   


#store의 state구조
{
    counter: { value: 0, diff: 1 }
    extra: { value: 'this_is_extra_reducer' }
}
- 리듀서를 여러개로 분리하여 작성할 땐, 서로 직접적인 관계가 없어야 한다.

3. Component 생성  (ui 컴포넌트 -  store에 저장된 state 의 subscribe하고, ..)
#Counter 컴포넌트 작성하기 - src/components/Counter.js
import React from 'react';
//connect를 react-redux에서 불러온다.
import { connect } from 'react-redux';

class Counter extends React.Component {
    render() {
        return (
            <h1>VALUE: { this.props.value }</h1>
        );
    }   
}

//mapStateToProps는 이렇게 arrow function을 사용한다.
let mapStateToProps = (state) => {
    return {
        value: state.counter.value
    };
}

//mapStateToProps를 사용하여 컴포넌트를 store에 연결시킨다.
Counter = connect(mapStateToProps)(Counter);

export default Counter;



# connect API
connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])

connect
 - react-redux의 내장 API이다.
 - React Component를 Redux Store에 '연결' 해준다.
 - connect의 리턴값은 특정 컴포넌트 클래스의 props를 store의 데이터에 연결시켜주는 또 다른 함수를 리턴한다.
 - 리턴된 함수에 컴포넌트를 인수로 넣어 실행하면, 기존 컴포넌트를 수정하는게 아닌, 새로운 컴포넌트를 리턴한다.
 - 인수:
1) mapStateToProps(state, [ownProps]) :(Function) store의 state를 컴포넌트의 props에 매핑시켜준다. ( 먼솔.....? 언젠가는 이해 할 수 있기를... )
2) mapDispatchToProps(dispatch,[ownProps]): (Function or Object) 컴포넌트의 특정 함수형 props를 실행 했을 때, 개발자가 지정한 action을 dispatch 하도록 설정합니다. ownProps의 용도는 위 인수와 동일합니다.


#Buttons 컴포넌트 작성하기 - src/components/Buttons.js
import React from 'react';
import { connect } from 'react-redux';
import { increment, decrement } from '../actions';

class Buttons extends React.Component {
    render() {
        return (
            <div>
                <button type="button"
                        onClick={ this.props.onIncrement }>
                        +
                </button>
                <button type="button"
                        onClick={ this.props.onDecrement }>
                        -
                </button>
            </div>
        )
    }
}


let mapDispatchToProps = (dispatch) => {
    return {  //이벤트가 발생이 되면 dispatch에게 action을 전달-> dispatch는 받은 action 타입의 reducer함수를 호출, 실행
        onIncrement: () => dispatch(increment()),  
        onDecrement: () => dispatch(decrement())
    }
}
//mapStateToProps가 필요없으므로 undefined를 전달하여 생략한다.
Buttons = connect(undefined, mapDispatchToProps)(Buttons); 

export default Buttons;



#Option 컴포넌트 작성하기 - src/components/Option.js

import React from 'react';
import { connect } from 'react-redux';
import { setDiff } from '../actions';

class Option extends React.Component {
    constructor(props) {
        super(props);

        this.state = {
            diff: '1'
        }

        this.onChangeDiff = this.onChangeDiff.bind(this);
    }

    render() {
        return (
            <div>
                <input 
                    type="text" 
                    value={ this.state.diff } 
                    onChange={ this.onChangeDiff }
                >
                </input>
            </div>
        );
    }

    onChangeDiff(e) {

        if(isNaN(e.target.value))
            return;
        
        this.setState({ diff: e.target.value });

        if(e.target.value=='') {
            this.setState({ diff: '0'});
        }

        this.props.onUpdateDiff(parseInt(e.target.value));

    }
}

let mapDispatchToProps = (dispatch) => {
    return {
        onUpdateDiff: (value) => dispatch(setDiff(value))
    };
}

Option = connect(undefined, mapDispatchToProps)(Option);

export default Option;




#App 컴포넌트 작성하기 - src/components/App.js
import React from 'react';
import Counter from './Counter';
import Buttons from './Buttons';
import Option from './Option';

class App extends React.Component {
    render(){
        return (
            <div style={ {textAlign: 'center'} }>
                <Counter/>
                <Option/>
                <Buttons/>
            </div>
        );
    }
}

export default App;


#src/index 작성하기
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import { createStore } from 'redux' 
import { Provider } from 'react-redux';
import App from './components/App';
import counterApp from './reducers';
 

const store = createStore(counterApp);

ReactDOM.render(
    <Provider   store = {store}>
        <App />
    </Provider>,
    document.getElementById('root')
);

 
======================================================
동적 Context 사용
1. 새 Context 생성 - Context 에 저장된 값을 변경하는 Provider 재정의
// contexts/color.js
import React, { createContext, useState } from 'react';
const ColorContext = createContext({
  state: { color: 'black', subcolor: 'red' },
  actions: {
    setColor: () => {},
    setSubcolor: () => {}
  }
});
const ColorProvider = ({ children }) => {
  const [color, setColor] = useState('black');
  const [subcolor, setSubcolor] = useState('red'); 
  const value = {
    state: { color, subcolor },
    actions: { setColor, setSubcolor }
  };
  return (
    <ColorContext.Provider value={value}>{children}</ColorContext.Provider>
  );
}; 
const { Consumer: ColorConsumer } = ColorContext;   // const ColorConsumer = ColorContext.Consumer와 같은 의미
export { ColorProvider, ColorConsumer };                  // ColorProvider와 ColorConsumer 내보내기
export default ColorContext;

2.  Context에 저장된 정보를 사용하는 컴포넌트
// components/ColorBox.js
import React from 'react';
import { ColorConsumer } from '../contexts/color';

const ColorBox = () => {
  return (
    <ColorConsumer>
      {value => (
        <>
          <div   style={{   width: '64px',
              		  height: '64px',
              		  background: value.state.color
            }}
          />
          <div   style={{    width: '32px',
             		   height: '32px',
             		   background: value.state.subcolor
            }}
          />
        </>
      )}
    </ColorConsumer>
  );
};

export default ColorBox;

=======================================================
1. 새 Context 생성
// src/contexts/color.js
import { createContext } from 'react'; 
const ColorContext = createContext({ color: 'black' });    //새 Context 생성
export default ColorContext;

2.  생성된 ColorContext로부터 상태 데이터 조회해서 사용하는 ColorBox 컴포넌트 생성
// src/components/ColorBox.js
import React from 'react';
import ColorContext from '../contexts/color';

const ColorBox = () => {
  return (
    <ColorContext.Consumer>
      {value => (
        <div
          style={{
            width: '64px',
            height: '64px',
            background: value.color
          }}
        />
      )}
    </ColorContext.Consumer>
  );
};
export default ColorBox;


3. 상위 컴포넌트(Root 컴포넌트) 
//src/App.js
import React from 'react';
import ColorBox from './components/ColorBox';
import ColorContext from './contexts/color';

const App = () => {
  return (
    <div>
      <ColorBox />
    </div>
  );
};
 
export default App;


4. Provider 컴포넌트로 Context 저장된 상태 정보 변경
    
//src/App.js
import React from 'react';
import ColorBox from './components/ColorBox';
import ColorContext from './contexts/color';


const App = () => {
  return (
    <div>
      <ColorContext.Provider value={{ color: 'red' }}>
      <div>
        <ColorBox />
      </div>
    </ColorContext.Provider>
    </div>
  );
};
 
export default App;

3. 확인
import React from 'react';
import ColorBox from './components/ColorBox';
import { ColorProvider } from './contexts/color';
const App = () => {
  return (
    <ColorProvider>
      <div>
        <ColorBox />
      </div>
    </ColorProvider>
  );
};

export default App;


4. 이벤트 발생에 따른 Context에 저장된 정보를 변경하는 Provider를 사용하는 SelectColor 컴포넌트 생성
import React from 'react';
import { ColorConsumer } from '../contexts/color';


const colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];



const SelectColors = () => {
  return (
    <div>
      <h2>색상을 선택하세요.</h2>
      <ColorConsumer>
        {({ actions }) => (
          <div style={{ display: 'flex' }}>
            {colors.map(color => (
              <div
                key={color}
                style={{ background: color, width: '24px', height: '24px', cursor: 'pointer' }}
                onClick={() => actions.setColor(color)}
                onContextMenu={e => {
                  e.preventDefault(); // 마우스 오른쪽 버튼 클릭 시 메뉴가 뜨는 것을 무시함
                  actions.setSubcolor(color);
                }}
              />
            ))}
          </div>
        )}
      </ColorConsumer>
      <hr />
    </div>
  );
};



export default SelectColors;

5. App.js 수정해서 확인
 import React from 'react';
import ColorBox from './components/ColorBox';
import { ColorProvider } from './contexts/color';
import SelectColors from './components/SelectColors';
 
const App = () => {
  return (
    <ColorProvider>
      <div>
        <SelectColors />
        <ColorBox />
      </div>
    </ColorProvider>
  );
};
 
export default App;

#######################################################################################################
import React from "react";
import NavBar from "./components/NavBar";
import Product from "./components/Product";
import Posts from "./components/Posts";
import Dashboard from "./components/Dashboard";
import ProductDetails from "./components/ProductDetails";
import Home from "./components/Home";
 
import NotFound from './components/NotFound';
import { Route, Switch, Redirect } from 'react-router-dom';    
const App = () => {
  return (
    <>
      <NavBar />
      <div className="content">
	     <Switch>
        <Route path="/products"  exact component={Product} />
        <Route path="/posts/:year?/:month?"    component={Posts} />
        <Route path="/admin"   component={Dashboard} />
        <Route path="/"     component={Home} />
		<Route path="/products/:id/:month" component={ProductDetails} /> {/* id: 경로 매개변수*/}
		<Route exact path="/" component={Home} />
            <Redirect from="/message"   to="/posts" /> {/* 주소/message 로 접속 시 주소/posts 로 리디렉션 */}
            <Redirect to="/not-found" component={NotFound} /> {/* NotFound 컴포넌트로 리디렉션 */}

		 </Switch>
      </div>
    </>
  );
};

export default App;========================================================================
import React from 'react';
import queryString from "query-string"; // query-string npm 패키지 import

const Posts = (props) => {
  const result = queryString.parse(props.location.search);
  const { approved, sortBy } = result; // query-string을 이용한 값 접근
  const { year, month } = props.match.params;

  return (
    <div>
      <h1>Posts</h1>
      <p>Year: {year}, Month: {month}</p>
      <p>Approved: {approved}</p>
      <p>SortBy: {sortBy}</p>
    </div>
  );
};

export default Posts;

==============================================================


import React from 'react';
import { Link } from 'react-router-dom';


const NavBar = () => {
  return (
    <nav className="navbar navbar-expand-lg navbar-light bg-light">
      <Link className="navbar-brand" to="/">Home</Link>

      <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span className="navbar-toggler-icon"></span>
      </button>
      <div className="collapse navbar-collapse" id="navbarNav">
        <ul className="navbar-nav">
          <li className="nav-item">
            <Link className="nav-link" to="/products">Products</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link" to="/posts/2019/09">Posts</Link>
          </li>
          <li className="nav-item">
            <Link className="nav-link" to="/admin" >Admin</Link>
          </li>
		  <li className="nav-item">
            <Link className="nav-link" to="/products/2020/11" >ProductDetails</Link>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default NavBar;
==============================================================================
import React from "react";
import NavBar from "./components/NavBar";
import Product from "./components/Product";
import Posts from "./components/Posts";
import Dashboard from "./components/Dashboard";
import ProductDetails from "./components/ProductDetails";
import Home from "./components/Home";
import { Route } from "react-router-dom"; // Route 컴포넌트 imort

const App = () => {
  return (
    <>
      <NavBar />
      <div className="content">
	     <switch>
        <Route path="/products"  exact component={Product} />
        <Route path="/posts/:year?/:month?"    component={Posts} />
        <Route path="/admin"   component={Dashboard} />
        <Route path="/"   exact   component={Home} />
		<Route path="/products/:id/:month" component={ProductDetails} /> {/* id: 경로 매개변수*/}

		 </switch>
      </div>
    </>
  );
};

export default App;
========================================================
import React from 'react';

const ProductDetails = (props) => {
  return <h1>Product Details: 
       {props.match.params.id} / {props.match.params.month}</h1>
}

export default ProductDetails;

===============================================================

//components/NavBar.js 
import React from 'react';

const NavBar = () => {
  return (
    <nav className="navbar navbar-expand-lg navbar-light bg-light">
      <a className="navbar-brand" href="/">Home</a>
      <button className="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span className="navbar-toggler-icon"></span>
      </button>
      <div className="collapse navbar-collapse" id="navbarNav">
        <ul className="navbar-nav">
          <li className="nav-item">
            <a className="nav-link" href="/products">Products</a>
          </li>
          <li className="nav-item">
            <a className="nav-link" href="/posts/2019/09">Posts</a>
          </li>
          <li className="nav-item">
            <a className="nav-link" href="/admin" >Admin</a>
          </li>
        </ul>
      </div>
    </nav>
  );
}

export default NavBar;


===================================================================
import React from "react";
import NavBar from "./components/NavBar";
import Product from "./components/Product";
import Posts from "./components/Posts";
import Dashboard from "./components/Dashboard";
import Home from "./components/Home";
import { Route } from "react-router-dom"; // Route 컴포넌트 imort

const App = () => {
  return (
    <>
      <NavBar />
      <div className="content">
        <Route path="/products"  component={Product} />
        <Route path="/posts"    component={Posts} />
        <Route path="/admin"   component={Dashboard} />
        <Route path="/"      component={Home} />
      </div>
    </>
  );
};

export default App;